trigger:
  - master

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: testAndBuild
    jobs: 
      - job: testAndBuild
        pool:
          vmImage: ubuntu-16.04
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "10.x"
            displayName: "Install Node.js"

          - script: |
              npm install
            displayName: "npm install"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                tokenJson=$(cat << EOS
                {
                  "access_token": "$ACCESS_TOKEN",
                  "refresh_token": "$REFRESH_TOKEN"
                }
                EOS
                )
                echo "$tokenJson" > token.json
              workingDirectory: "$(System.DefaultWorkingDirectory)"
            env:
              ACCESS_TOKEN: $(accessToken)
              REFRESH_TOKEN: $(refreshToken)

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                credential=$(cat << EOS
                {
                  "installed": {
                    "client_id": "$CLIENT_ID",
                    "project_id": "quickstart-1550231045469",
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                    "client_secret": "$CLIENT_SECRET",
                    "redirect_uris": ["urn:ietf:wg:oauth:2.0:oob", "http://localhost"]
                  }
                }
                EOS
                )
                echo "$credential" > oauthCredential.json
              workingDirectory: "$(System.DefaultWorkingDirectory)"
            env:
              CLIENT_ID: $(clientID)
              CLIENT_SECRET: $(clientSecret)

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: deployPackage

  - stage: WebAppsDeploy

    dependsOn: testAndBuild
    jobs:
      - job: WebAppsDeploy
        pool:
          vmImage: ubuntu-16.04
        steps:
          - checkout: none

          - download: current
            artifact: deployPackage

          - task: AzureWebApp@1
            displayName: Azure Web Apps Deploy
            inputs: 
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(appName)
              package: $(Pipeline.Workspace)/deployPackage/*.zip
